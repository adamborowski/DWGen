// Generated by CoffeeScript 1.6.3
(function() {
  var compare, dateUtils, generateRanges, simImpl, simRestaurant;

  dateUtils = require('date-utils');

  simImpl = require('./SimImpl.js');

  compare = function(a, b) {
    if (a.when < b.when) {
      return -1;
    }
    if (a.when > b.when) {
      return 1;
    }
    return 0;
  };

  generateRanges = function(simStart, simEnd, changes) {
    var change, from, index, range, ranges, to, _i, _j, _len, _len1;
    ranges = [];
    ranges.push({
      from: new Date(simStart),
      to: (new Date(changes[0].when)).addDays(-1),
      changeAtStart: void 0
    });
    for (index = _i = 0, _len = changes.length; _i < _len; index = ++_i) {
      change = changes[index];
      from = new Date(change.when);
      if (changes[index + 1] != null) {
        to = new Date(changes[index + 1].when).addDays(-1);
      } else {
        to = new Date(simEnd);
      }
      ranges.push({
        from: from,
        to: to,
        changeAtStart: change
      });
    }
    for (_j = 0, _len1 = ranges.length; _j < _len1; _j++) {
      range = ranges[_j];
      range.toString = function() {
        return "range: od " + (this.from.toDayString()) + " do " + (this.to.toDayString()) + " zmiana początkowa: " + (this.changeAtStart != null ? this.changeAtStart.when.toDayString() : '[nic]');
      };
    }
    return ranges;
  };

  simRestaurant = function(restaurant, config, erd) {
    var category, changes, range, ranges, simEnd, simStart, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
    console.log("SIMULATION '" + restaurant.nazwa + "'");
    /* PRZEBIEG SYMULACJI
    	każdej kategorii przydziela się początkowe daily sales
    	jeśli mamy jakąś zmianę zwględną, każdą kategorię przemnażamy razy ratio, o ile dana kategoria pasuje do REGEX
    	czyli swing codziennie przemnaża jakąś kategorię
    	a changes przemnaża tylko te kategorie pasujące do regex
    	symulacja podzielona jest na kroki, które są wyznaczane przez daty zmian
    	czyli zmiany należy przesortować zwględem daty zmian i na takie odcinki podzielić
    */

    changes = config.erd.restaurant.changes.sort(compare);
    _ref = erd.Kategoria;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      category = _ref[_i];
      category.dailySaleBase = config.erd.restaurant.initialSalesRatio * restaurant.liczba_miejsc;
    }
    _ref1 = erd.Kategoria;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      category = _ref1[_j];
      category.daySales = [];
    }
    simStart = config.erd.restaurant.simStart;
    simEnd = config.erd.restaurant.simEnd;
    ranges = generateRanges(simStart, simEnd, changes);
    _results = [];
    for (_k = 0, _len2 = ranges.length; _k < _len2; _k++) {
      range = ranges[_k];
      _results.push(simImpl.simRange(range, erd));
    }
    return _results;
  };

  exports.simulate = function(config, erd) {
    var restaurant, _i, _len, _ref;
    _ref = erd.Restauracja.slice(0, 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      restaurant = _ref[_i];
      simImpl.init(config, erd, restaurant);
      simRestaurant(restaurant, config, erd);
    }
    return simImpl.finish();
  };

}).call(this);

/*
//@ sourceMappingURL=SalesSimulator.map
*/
