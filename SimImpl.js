// Generated by CoffeeScript 1.6.3
(function() {
  var Kategoria, Utils, ZamowienieLastId, config, erd, generateDailyOrders, mscPerDay, print, restaurant, restaurantConfig, simChange, simDay, swing, testCategory;

  print = console.log;

  Utils = require('./Utils.js');

  mscPerDay = 1000 * 60 * 60 * 24;

  erd = void 0;

  config = void 0;

  Kategoria = void 0;

  restaurantConfig = void 0;

  swing = void 0;

  restaurant = void 0;

  testCategory = void 0;

  ZamowienieLastId = 0;

  exports.init = function(_config, _erd, _restaurant) {
    erd = _erd;
    config = _config;
    Kategoria = erd.Kategoria;
    restaurantConfig = config.erd.restaurant;
    swing = restaurantConfig.swing;
    restaurant = _restaurant;
    return testCategory = Kategoria.filter(function(kat) {
      return kat.id === 'pizza';
    })[0];
  };

  exports.finish = function() {
    var day, fs, highcharts, options;
    return true;
    fs = require("fs");
    highcharts = require("node-highcharts");
    options = {
      chart: {
        width: 1500,
        height: 500
      },
      legend: {
        enabled: false
      },
      title: {
        text: "dzienna sprzeda≈º w kategorii " + testCategory.nazwa + " na przestrzeni czasu generatora"
      },
      series: [
        {
          data: (function() {
            var _i, _len, _ref, _results;
            _ref = testCategory.daySales;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              day = _ref[_i];
              _results.push(day.numSales);
            }
            return _results;
          })()
        }
      ]
    };
    return highcharts.render(options, function(err, data) {
      if (err) {
        return console.log("Error: " + err);
      } else {
        if (fs.exists("chart.png")) {
          fs.remove('chart.png');
        }
        return fs.writeFile("chart.png", data, function() {
          return console.log("Written to chart.png");
        });
      }
    });
  };

  exports.simRange = function(range, erd, config) {
    var currentDate, numDays, rangeEnd;
    rangeEnd = range.to;
    currentDate = new Date(range.from);
    numDays = 0;
    while (currentDate <= rangeEnd) {
      if ((range.changeAtStart != null) && numDays <= range.changeAtStart.duration) {
        simChange(range.changeAtStart);
      }
      simDay(currentDate);
      currentDate.addDays(1);
      numDays++;
    }
  };

  simChange = function(change) {
    var kategoria, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = Kategoria.length; _i < _len; _i++) {
      kategoria = Kategoria[_i];
      if (change.category.test(kategoria.id)) {
        _results.push(kategoria.dailySaleBase += change.addition / change.duration);
      }
    }
    return _results;
  };

  simDay = function(date, erd) {
    var addition, daily, kategoria, _i, _len;
    daily = Math.random() * (swing.highLimit - swing.lowLimit) + swing.lowLimit;
    addition = swing.addFuncion(date.getTime() / mscPerDay);
    for (_i = 0, _len = Kategoria.length; _i < _len; _i++) {
      kategoria = Kategoria[_i];
      kategoria.dailySaleBase *= daily;
      kategoria.dailySaleAddition = addition;
      kategoria.dailySale = kategoria.dailySaleBase + kategoria.dailySaleAddition;
      kategoria.daySales.push({
        date: new Date(date),
        numSales: Math.floor(kategoria.dailySale)
      });
    }
    return generateDailyOrders(date, Kategoria[0].daySales.length - 1);
  };

  generateDailyOrders = function(date, daySalesIndex) {
    var DailyOrder, avgOrderSize, c, dailyOrder, dodajDanieDoZamowienia, genTime, i, id, iloscDodanychDan, kategoria, makeDuration, numOrders, orderTime, poz, pozycjeTab, remainingSales, restaurantClose, restaurantOpen, sumSales, wybierzJakiesDanie, _i, _j, _k, _len, _len1, _ref, _results;
    remainingSales = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = Kategoria.length; _i < _len; _i++) {
        kategoria = Kategoria[_i];
        _results.push({
          kategoria: kategoria,
          numSales: kategoria.daySales[daySalesIndex].numSales
        });
      }
      return _results;
    })();
    sumSales = remainingSales.reduce(function(sum, sale) {
      return sum + sale.numSales;
    }, 0);
    avgOrderSize = config.erd.restaurant.avgOrderSize;
    numOrders = Math.round(sumSales / avgOrderSize);
    restaurantOpen = restaurant.godzina_otwarcia;
    restaurantClose = restaurant.godzina_zamkniecia;
    genTime = function() {
      var genDate, hh, mm;
      hh = Utils.random.integer(restaurantOpen, restaurantClose);
      mm = Utils.random.integer(0, 60);
      genDate = new Date(date);
      genDate.setHours(hh);
      genDate.setMinutes(mm);
      return genDate;
    };
    DailyOrder = [];
    for (i = _i = 1; 1 <= numOrders ? _i <= numOrders : _i >= numOrders; i = 1 <= numOrders ? ++_i : --_i) {
      orderTime = genTime();
      makeDuration = Utils.random.float(config.erd.restaurant.minWaitMinutes, config.erd.restaurant.maxWaitMinutes);
      dailyOrder = {
        id: ZamowienieLastId++,
        data_przyjecia: orderTime,
        data_platnosci: new Date(orderTime).addMinutes(makeDuration),
        kelner: Utils.random.arrayItem(restaurant.kelnerzy),
        numer_stolika: Utils.random.integer(restaurant.liczba_miejsc),
        platnosc: Utils.random.arrayItem(config.erd.payments),
        kod_rabatu: null,
        pozycje: {},
        toString: function() {
          var key, poz, str, _ref;
          str = this.data_platnosci.toTimeString() + (" odebrane przez: " + this.kelner.imie + " " + this.kelner.nazwisko);
          _ref = this.pozycje;
          for (key in _ref) {
            poz = _ref[key];
            str += "\n\t- " + poz.danie.nazwa + ": " + poz.porcja;
          }
          return str;
        }
      };
      DailyOrder.push(dailyOrder);
    }
    DailyOrder.sort(function(a, b) {
      if (a.data_przyjecia < b.data_przyjecia) {
        return -1;
      }
      if (a.data_przyjecia > b.data_przyjecia) {
        return 1;
      }
      return 0;
    });
    iloscDodanychDan = 0;
    dodajDanieDoZamowienia = function(danie, zamowienie) {
      var id;
      iloscDodanychDan++;
      id = danie.id;
      if (zamowienie.pozycje[id] != null) {
        return zamowienie.pozycje[id].porcja++;
      } else {
        return zamowienie.pozycje[id] = {
          danie: danie,
          zamowienie: zamowienie,
          cena: danie.cena,
          porcja: 1
        };
      }
    };
    wybierzJakiesDanie = function() {
      var chosenCategory, chosenDish;
      chosenCategory = Utils.random.arrayItem(remainingSales);
      chosenDish = Utils.random.arrayItem(chosenCategory.kategoria.dania);
      chosenCategory.numSales--;
      if (chosenCategory.numSales === 0) {
        Utils.array.removeUnordered(remainingSales, chosenCategory);
      }
      return chosenDish;
    };
    for (_j = 0, _len = DailyOrder.length; _j < _len; _j++) {
      dailyOrder = DailyOrder[_j];
      dodajDanieDoZamowienia(wybierzJakiesDanie(), dailyOrder);
    }
    while (remainingSales.length) {
      dodajDanieDoZamowienia(wybierzJakiesDanie(), Utils.random.arrayItem(DailyOrder));
    }
    _results = [];
    for (_k = 0, _len1 = DailyOrder.length; _k < _len1; _k++) {
      dailyOrder = DailyOrder[_k];
      erd.Zamowienie.push(dailyOrder);
      pozycjeTab = [];
      c = 0;
      _ref = dailyOrder.pozycje;
      for (id in _ref) {
        poz = _ref[id];
        pozycjeTab.push(poz);
        erd.ZamowienieProdukt.push(poz);
        poz.nr = c;
        c++;
      }
      _results.push(dailyOrder.pozycje = pozycjeTab);
    }
    return _results;
  };

}).call(this);

/*
//@ sourceMappingURL=SimImpl.map
*/
